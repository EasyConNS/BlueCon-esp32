#pragma once

///Switch Replies
// Standard full mode
static uint8_t standreport[] = {
    0x30, // report ID Standard full mode
    /* input reports with IMU data instead of subcommand replies
       Pushes current state @60Hz, or @120Hz if Pro Controller */
    /* 0x3F for This input packet is pushed to the host when a button is pressed or released
       and provides the "normal controller" interface for the OS.*/
    // 0x21 for Standard input reports used for subcommand replies
    // 0x31 for NFC/IR MCU mode
    0x00, // Timer
    0x80, // battery level
    0,    //but1
    0,    //but2
    0,    //but3
    0,    //Lstick
    0x08, //Ls
    0x80, //Ls
    0,    //Rstick
    0x08, //Rs
    0x80, //Rs
    0x08};
// subcommands reply
static uint8_t reply02[] = {
    // device info
    0x21,             // report ID
    0x01,             // Timer
    0x40,             // high: Battery level
                      // low: Connection info, 6 for ball?
                      
    0x84, 0x00, 0x12, // buttons
    0x00, 0x08, 0x80, // left stick
    0x00, 0x08, 0x80, // right stick
    0x00,             // Vibrator input report. Decides if next vibration pattern should be sent
    0x82,             // ACK byte for subcmd reply
    0x02,             // Reply-to subcommand ID
    0x03, 0x48,       //15-49 Max 35 bytes(excludes 2 byte subcmd ack above)
    0x03,             //1=Left Joy-Con, 2=Right Joy-Con, 3=Pro Controller
    0x02,
    0xD8, 0xA0, 0x1D, 0x40, 0x15, 0x66, // mac addr in big endian
    0x03,
    0x01, // If 01, colors in SPI are used. Otherwise default ones
    // 13-48  (ID x30, x31, x32, x33)
    // 6-Axis data. 3 frames of 2 groups of 3 Int16LE each. Group is Acc followed by Gyro
    0x00, 0x00
    // 49-361 (ID 0x31) NFC/IR data input report. Max 313 bytes
};
static uint8_t reply08[] = { // Set shipment low power state
    0x21, 0x02, 0x8E,
    0x00, 0x00, 0x00, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x80,
    0x08,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static uint8_t reply03[] = { // set input report mode
    0x21, 0x05, 0x8E,
    0x84, 0x00, 0x12, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x80,
    0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static uint8_t reply04[] = { // Trigger buttons elapsed time
    0x21, 0x06, 0x8E,
    0x00, 0x00, 0x00, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x83,
    0x04,
    0x00, 0x6a, 0x01, 0xbb, 0x01, 0x93, 0x01, 0x95, 0x01, 0x00};
static uint8_t reply4801[] = { // Enable vibration
    0x21, 0x04, 0x8E,
    0x00, 0x00, 0x00, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x80, 0x48,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static uint8_t reply4001[] = { // Enable IMU (6-Axis sensor)
    0x21, 0x04, 0x8E,
    0x00, 0x00, 0x00, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x80, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static uint8_t reply3001[] = { // Set player lights
    0x21, 0x04, 0x8E,
    0x00, 0x00, 0x00, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x80, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
/*
Black:
    body: const Color(0xFF323232),
    button: const Color(0xFFAAAAAA),
    leftGrip: _Profile.Gray,
    rightGrip: _Profile.Gray,
    code: const Color(0xFF323232),
Splatoon 2:
    body: const Color(0xFF313232),
    button: const Color(0xFFDDDDDD),
    leftGrip: _Profile.NeonGreen,
    rightGrip: _Profile.NeonPink,
    code: const Color(0xFF313232),
Xenoblade 2:
    body: const Color(0xFF323132),
    button: const Color(0xFFDDDDDD),
    leftGrip: _Profile.Red,
    rightGrip: _Profile.Red,
    code: const Color(0xFF323132),
*/
static uint8_t reply1050[] = { // SPI flash read
    0x21, 0x04, 0x8E,
    0x84, 0x00, 0x12, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x90, 0x10,       // reply id
    0x50, 0x60, 0x00, 0x00, // Little-endian int32 address
    //   | color defined |
    0x10, 0x32, 0x31, 0x32, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
static uint8_t reply1060[] = {
    0x21, 0x03, 0x8E,
    0x84, 0x00, 0x12, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x90, 0x10,
    0x00, 0x60, 0x00, 0x00,
    0x10, // |Serial number|
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00};
static uint8_t reply1080[] = {
    0x21, 0x04, 0x8E,
    0x84, 0x00, 0x12, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x90, 0x10,
    0x80, 0x60, 0x00, 0x00,
    0x18, 0x5e, 0x01, 0x00, 0x00, 0xf1, 0x0f, 0x19, 0xd0, 0x4c,
    0xae, 0x40, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00};
static uint8_t reply1098[] = {
    0x21, 0x04, 0x8E,
    0x84, 0x00, 0x12, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x90, 0x10,
    0x98, 0x60, 0x00, 0x00,
    0x12, 0x19, 0xd0, 0x4c, 0xae, 0x40, 0xe1, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x00};

//User analog stick calib
static uint8_t reply1010[] = { // 8010
    0x21, 0x04, 0x8E,
    0x84, 0x00, 0x12, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x90, 0x10,
    0x10, 0x80, 0x00, 0x00,
    0x18, 0x00, 0x00};
static uint8_t reply1020[] = { // 6020
    0x21, 0x04, 0x8E,
    0x84, 0x00, 0x12, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x90, 0x10,
    0x20, 0x60, 0x00, 0x00,
    0x18, 0x00, 0x00};
static uint8_t reply103D[] = { // 603D
    0x21, 0x05, 0x8E,
    0x84, 0x00, 0x12, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x90, 0x10,
    0x3D, 0x60, 0x00, 0x00,
    0x13,
    0xF0, 0x07, 0x7f, 0xF0, 0x07, 0x7f,
    0xF0, 0x07, 0x7f, 0xF0, 0x07, 0x7f,
    0xF0, 0x07, 0x7f, 0xF0, 0x07, 0x7f,
    0xF0, 0x07, 0x7f, 0xF0, 0x07, 0x7f,
    0x0f, 0x0f, 0x00};

static uint8_t reply2100[] = { // Set NFC/IR MCU configuration
    0x21, 0x03, 0x8E,
    0x84, 0x00, 0x12, 0x01, 0x18, 0x80, 0x01, 0x18, 0x80,
    0x80, 0x80, 0x21,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00};
